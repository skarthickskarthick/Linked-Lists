1) 83. Remove Duplicates from Sorted List
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode temp=head;
        while(temp!=null)
        {
            if(temp.next!=null&&temp.val==temp.next.val)
            temp.next=temp.next.next;
            else
            temp=temp.next;
        }
        return head;
        
    }
}



2) 82. Remove Duplicates from Sorted List II
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
         ListNode temp=new ListNode(0,head);
         ListNode prev=temp;
        while(head!=null)
        {
            
            if(head.next!=null&&head.val==head.next.val)
            {
                
                while(head.next!=null&&head.val==head.next.val)
                {
                    head=head.next;
                }
                 prev.next=head.next;
           
            }
          
           
            else
                prev=prev.next;
            head=head.next;
            
           
        }
        return temp.next;
    }
}

3)206. Reverse Linked List
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
            if(head==null)
        return head;
        ListNode prev=null;
        ListNode present=head;
        ListNode nextt=present.next;
    
        while(present!=null)
        {
            present.next=prev;
            prev=present;
            present=nextt;
            if(nextt!=null)
            nextt=nextt.next;
        }
        return prev;
    }
}

4)92. Reverse Linked List II

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left==right)
        return head;
        
        ListNode current=head;
        
       
        ListNode prev=null;
        for(int i=0;current!=null&&i<left-1;i++)
        {
            
     prev=current;
     current=current.next; 
        
        }
         ListNode last=prev;

        ListNode newend=current;
     ListNode nextt=current.next;
        for(int i=0;current!=null&&i<right-left+1;i++)
        {
            current.next=prev;
            prev=current;
            current=nextt;
            if(nextt!=null)
            nextt=nextt.next;

    }
           if(last!=null)
           last.next=prev;
           else
           head=prev;
           newend.next=current;
 
   return head;
}

}


5)141. Linked List Cycle

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null||head.next==null)
        return false;
        ListNode first=head;
        ListNode second=head.next;
        while(second!=null && second.next!=null)
        {
            if(second==first)
            return true;
            first=first.next;
            second=second.next.next;
        }
      
        return false;
    }
}

6)328. Odd Even Linked List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode oddHead = head;
        ListNode evenHead = head.next;
        ListNode odd = oddHead;
        ListNode even = evenHead;
        
        while (even != null && even.next != null) {
            odd.next = even.next;
            odd = odd.next;
            even.next = odd.next;
            even = even.next;
        }
        
        odd.next = evenHead;
        
        return oddHead;
    }
}

7)876. Middle of the Linked List
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        int count=0;
        ListNode temp=head;
        while(temp!=null)
        {
            count++;
            temp=temp.next;
         }
         temp=head;
         for(int i=0;i<count/2;i++)
         temp=temp.next;
         return temp;
    }
}
8)2095. Delete the Middle Node of a Linked List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        ListNode temp=head;
        if(temp.next==null){
            temp=null;
        return temp;
        }
        int n=0;
        while(temp!=null)
        {
            temp=temp.next;
            n++;
        }
        temp=head;
        for(int i=1;i<n/2;i++)
        temp=temp.next;
        temp.next=temp.next.next;
        temp=head;
        return temp;


    }
}


9)876. Middle of the Linked List


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow=head;
        if(head.next==null) 
        return head;
        else if(head.next.next==null)
        return head.next;
        ListNode fast=head.next.next;
        while(fast!=null&&fast.next!=null)
        {
            
            slow=slow.next;
            
            fast=fast.next.next;
        }
        return slow.next;
    }
}




10)2130. Maximum Twin Sum of a Linked List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
      ListNode slow=head;
    ListNode fast=head;
	
    while(fast!=null && fast.next!=null && fast.next.next!=null)
    {
        slow=slow.next;
        fast=fast.next.next;
    }
    ListNode nex=slow.next;
    slow.next=null;
    ListNode temp=reverse(nex);
    ListNode temp1=temp;
    int ans=0;
    while(head!=null && temp!=null)
    {
        ans=Math.max(head.val+temp.val,ans);
        head=head.next;
        temp=temp.next;
    }
    return ans;
    }
    public ListNode reverse(ListNode head)
{
    ListNode prev=null;
    while(head!=null)
    {
        ListNode nex=head.next;
        head.next=prev;
        prev=head;
        head=nex;
    }
    return prev;
}
}

11)148. Sort List--> insertion sort


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        ListNode temp=head;
        ListNode ans=null;
        if(head==null)
        return null;
        if(head.next==null)
        return head;
       
        while(temp!=null)
        {
           
         if(ans==null||temp.val<ans.val)
        ans= insertfirst(ans,temp.val);
        else
        ans=insert(ans,temp.val);
          temp=temp.next;
          
        }
        return ans;
        
    }
    public static ListNode insertfirst(ListNode head,int val)
    {
      
        ListNode nod=new ListNode(val);
        nod.next=head;
        head=nod;
        return head;
    }
    public static ListNode insert(ListNode head,int val)
    {
        ListNode temp=head,prev=null;
        ListNode nod=new ListNode(val);
        if(temp.next==null)
        {
            temp.next=nod;
            nod.next=null;
            temp=head;
            return temp;
        }
        int flag=0;
        while(temp!=null)
        {
            
            if(temp.val>val)
            {
              prev.next=nod;
              nod.next=temp;
              flag=1;
              break;
            }
            prev=temp;
            temp=temp.next;
        }
        if(flag==0)
        {
            prev.next=nod;
            nod.next=null;
        }
        temp=head;
        return temp;
    }
}


(or)

class Solution {
    public ListNode sortList(ListNode head) {
        ListNode temp = head;
        ListNode ans = null;

        if (head == null) return null;
        if (head.next == null) return head;

        while (temp != null) {
            if (ans == null || temp.val < ans.val)
                ans = insertfirst(ans, temp.val);
            else
                ans = insert(ans, temp.val);
            temp = temp.next;
        }
        return ans;
    }

    public static ListNode insertfirst(ListNode head, int val) {
        ListNode nod = new ListNode(val);
        nod.next = head;
        head = nod;
        return head;
    }

    public static ListNode insert(ListNode head, int val) {
        ListNode temp = head, prev = null;
        ListNode nod = new ListNode(val);

        // Check if the list has only one node to save some operations
        if (temp.next == null) {
            temp.next = nod;
            return head;
        }

        // Traverse to find the appropriate position to insert
        while (temp != null && temp.val <= val) {
            prev = temp;
            temp = temp.next;
        }

        // Inserting at the beginning if `prev` is null
        if (prev == null) {
            nod.next = head;
            return nod;
        }

        // Regular insert
        prev.next = nod;
        nod.next = temp;

        return head;
    }
}


     (or)


class Solution {
    public ListNode sortList(ListNode head) {
        ListNode temp = head;
        ListNode ans = null;
        ListNode sortedTail = null; // Pointer to the tail of the sorted list

        if (head == null) return null;
        if (head.next == null) return head;

        while (temp != null) {
            if (ans == null || temp.val < ans.val) {
                ans = insertfirst(ans, temp.val);
                if (sortedTail == null) sortedTail = ans; // Initialize sortedTail
            } else if (sortedTail != null && temp.val >= sortedTail.val) {
                // Directly append if current value is greater than sorted tail
                sortedTail.next = new ListNode(temp.val);
                sortedTail = sortedTail.next;
            } else {
                ans = insert(ans, temp.val);
            }
            temp = temp.next;
        }
        return ans;
    }

    public static ListNode insertfirst(ListNode head, int val) {
        ListNode nod = new ListNode(val);
        nod.next = head;
        head = nod;
        return head;
    }

    public static ListNode insert(ListNode head, int val) {
        ListNode temp = head, prev = null;
        ListNode nod = new ListNode(val);

        while (temp != null && temp.val <= val) {
            prev = temp;
            temp = temp.next;
        }

        if (prev == null) {
            nod.next = head;
            return nod;
        }

        prev.next = nod;
        nod.next = temp;

        return head;
    }
}


12)61. Rotate List


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null)
        return null;
        if(head.next==null)
        return head;

        int n=0;
        ListNode temp=head;
            while(temp!=null)
        {n++;
            temp=temp.next;
        }
    k=k%n;
   
        for(int i=0;i<k;i++)
        {
            ListNode element=lastnode(head);
       
            head=deletelast(head);
            head= insertfirst(head,element);
          
        
        }   
        return head;     
    }
    public static ListNode insertfirst(ListNode head,ListNode element)
    {
      
      element.next=head;
      head=element;
      
      return element;


    }
    public static ListNode deletelast(ListNode head)
    {
        ListNode temp=head;
        while(temp.next.next!=null)
        {
            
            temp=temp.next;
        }
        temp.next=null;
        temp=head;
        return temp;

    }
    public static ListNode lastnode(ListNode head)
    {
        ListNode temp=head;
        while(temp.next!=null)
        {
            temp=temp.next;
        }
        return temp;
    }
}